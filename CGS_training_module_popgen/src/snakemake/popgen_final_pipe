import sys


def message(mes):
  sys.stderr.write("|--- " + mes + "\n")

##----------------##
## Initialisation ##
##----------------##

configfile: "config.yaml" 

# User-defined variables

#BASE_DIR = "/home/guest/projects"
#WDIR = BASE_DIR + "/makona"
#RDIR = BASE_DIR + "/makona/results"


BASE_DIR = config["dir_paths"]["base_dir"]
WDIR = BASE_DIR +  config["dir_paths"]["work_dir"]
RDIR = BASE_DIR + config["dir_paths"]["result_dir"]


if os.path.exists(RDIR):
	print (RDIR + " directory exists")
else:
	os.mkdir(RDIR)
workdir: RDIR
message("Results directory is: " + RDIR)

workdir: WDIR
message("The current working directory is " + WDIR)

##--------------------------------------------------------------------------------------##
## The list of samples to be processed
##--------------------------------------------------------------------------------------##

(SAMPLES,) = glob_wildcards("samples/raw/{smp}_R1_001.fastq.gz")
print(SAMPLES)
NB_SAMPLES = len(SAMPLES)

message("Number of samples to analyze: " + str(NB_SAMPLES))
for sid in sorted(SAMPLES):
    message("Sample " + sid + " (reads: " + sid + "_R1_001.fastq.gz & " + sid + "_R2_001.fastq.gz) will be processed")

##-------------------##
## SUCCESS / FAILURE ##
##-------------------##

onsuccess:
    print("Workflow finished, no error")

onerror:
	print("An error occurred")

##-----------##
## THE RULES ##
##-----------##

rule all:
	input:
		expand("samples/raw/{smp}_R1_001.fastq.gz", smp=SAMPLES),
		expand("samples/raw/{smp}_R2_001.fastq.gz", smp=SAMPLES),
		expand("results/fastqc/{smp}_R1_001_fastqc.html",smp=SAMPLES),
		expand("results/fastqc/{smp}_R1_001_fastqc.zip",smp=SAMPLES),
		expand("results/fastqc/{smp}_R2_001_fastqc.html",smp=SAMPLES),
		expand("results/fastqc/{smp}_R2_001_fastqc.zip",smp=SAMPLES),
		expand("results/fastqc/{smp}_fastqc.logfc.txt",smp=SAMPLES),
		expand("results/primer_adapt_removed/{smp}_R1_paired.fastq",smp=SAMPLES),
		expand("results/primer_adapt_removed/{smp}_R1_unpaired.fastq",smp=SAMPLES),
		expand("results/primer_adapt_removed/{smp}_R2_paired.fastq",smp=SAMPLES),
		expand("results/primer_adapt_removed/{smp}_R2_unpaired.fastq",smp=SAMPLES),
		expand("results/primer_adapt_removed/{smp}_trimmolog.txt",smp=SAMPLES),
		expand("results/ref_aligned/{smp}_assembly_align_mem_ref.sam",smp=SAMPLES),
		expand("results/ref_aligned/{smp}_assembly_align_mem_ref_sorted.bam",smp=SAMPLES),
		expand("results/velvet_assembly/{smp}_assembly_log.txt",smp=SAMPLES),
		expand("results/velvet_assembly/{smp}_logfile_assemref_27.txt",smp=SAMPLES),
		expand("results/assembl_stats/{smp}_logfile_assembly_predictgene.txt",smp=SAMPLES),
		expand("results/velvet_assembly/{smp}_logfile_cindex.txt",smp=SAMPLES),
		expand("results/assembly_aligned/{smp}_contigalign.sam",smp=SAMPLES),
		expand("results/assembly_aligned/{smp}_contigalign.bam",smp=SAMPLES),
		expand("results/velvet_assembly/{smp}_reindex.log.txt",smp=SAMPLES),
		expand("results/variants_calling/{smp}_snpcall.txt",smp=SAMPLES),
		expand("results/variants_calling/{smp}_mpileup.vcf.gz",smp=SAMPLES),
		expand("results/variants_calling/{smp}_vcfindex.txt",smp=SAMPLES),
		expand("results/consensus_seq/{smp}_consensus.fa",smp=SAMPLES),
		expand("results/variants_stats/{smp}_vcf.stats",smp=SAMPLES)
		
		

##----------------------##
## FASTQ ORIGINAL READS ##
##----------------------##

rule raw_fastqc:
    """
    Run fastQC for each pair
    """
    input:
        "samples/raw/{smp}_R1_001.fastq.gz", "samples/raw/{smp}_R2_001.fastq.gz"
    output:
        "results/fastqc/{smp}_R1_001_fastqc.html", "results/fastqc/{smp}_R1_001_fastqc.zip","results/fastqc/{smp}_R2_001_fastqc.html","results/fastqc/{smp}_R2_001_fastqc.zip", log1="results/fastqc/{smp}_fastqc.logfc.txt"
    shell: """
		fastqc {input} -f fastq -o results/fastqc > {output.log1}
	"""
rule trimmomatic:
	input:
		fwd="samples/raw/{smp}_R1_001.fastq.gz", rev="samples/raw/{smp}_R2_001.fastq.gz"
	output:
		fastq1p="results/primer_adapt_removed/{smp}_R1_paired.fastq",
		fastq1up="results/primer_adapt_removed/{smp}_R1_unpaired.fastq",
		fastq2p="results/primer_adapt_removed/{smp}_R2_paired.fastq",
		fastq2up="results/primer_adapt_removed/{smp}_R2_unpaired.fastq",
		log2="results/primer_adapt_removed/{smp}_trimmolog.txt"
	params:
		adaptors=config["parameters"]["pri_adaptors"],logprefix=config["parameters"]["logstr"],tool_path=config["dir_paths"]["tool_path"]
	message: """--- Cutting adaptors/primers and quality trimming reads head and tail of sequence reads."""
	shell: """
	    time java -jar {params.tool_path}/Trimmomatic-0.39/trimmomatic-0.39.jar PE -threads 10 -trimlog {params.logprefix} {input.fwd} {input.rev} {output.fastq1p} {output.fastq1up} {output.fastq2p} {output.fastq2up} ILLUMINACLIP:{params.adaptors}:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:30 > {output.log2}
	"""
rule refmapsam:
	input:
		fastq1p="results/primer_adapt_removed/{smp}_R1_paired.fastq",
		fastq2p="results/primer_adapt_removed/{smp}_R2_paired.fastq"
	params:srefindex=config["ref"]["srefindex"]	
	output:
		assemrefal="results/ref_aligned/{smp}_assembly_align_mem_ref.sam"
	message: """ --- Mapping reads to reference genome using bwa """
	shell: """
		time bwa mem -t 30 {params.srefindex} {input.fastq1p} {input.fastq2p} > {output.assemrefal}
	"""
rule samsort2bam:
	input:
		assemrefal="results/ref_aligned/{smp}_assembly_align_mem_ref.sam"
	output:
		sortedbam="results/ref_aligned/{smp}_assembly_align_mem_ref_sorted.bam"
	message: """ --- Sorting alignment files and converting from SAM to BAM """
	shell: """
		time samtools sort -O BAM {input.assemrefal} > {output.sortedbam}
	"""
rule assembly:
	input:
		sortedbam="results/ref_aligned/{smp}_assembly_align_mem_ref_sorted.bam"
	params:
		kmerbest=config["parameters"]["kmerbest"],
		assemdir="results/velvet_assembly/{smp}_AssemRef"
	output:
		logfile="results/velvet_assembly/{smp}_assembly_log.txt"
	message: """ --- Creating assembly using Velvet assembler """
	shell: """
		 time velveth {params.assemdir} {params.kmerbest} -bam -longPaired {input.sortedbam} > {output.logfile}
	"""
rule assembly_sgraph:
	input:
		logfile="results/velvet_assembly/{smp}_assembly_log.txt"
	params:
		assemdir="results/velvet_assembly/{smp}_AssemRef"
	output:
		logfile="results/velvet_assembly/{smp}_logfile_assemref_27.txt"
	message: """ --- Creating assembly using graph """
	shell: """
		time velvetg {params.assemdir} -amos_file yes > {output.logfile}
	"""
rule assembly_predictgene:
	input:
		logfile="results/velvet_assembly/{smp}_logfile_assemref_27.txt",
		sreferencef=config["ref"]["sreference"],
		sannotationf=config["ref"]["sannotation"]
	params: 
		contigfile="results/velvet_assembly/{smp}_AssemRef/contigs.fa",
		tool_path=config["dir_paths"]["tool_path"],
		assemblystatrepo="results/assembl_stats/{smp}_reference_stats"
	output:
		logfile="results/assembl_stats/{smp}_logfile_assembly_predictgene.txt"
	message: """ ---Creating quality stats on assembly """
	shell: """
		time {params.tool_path}/quast/quast.py {params.contigfile} -R {input.sreferencef} --features {input.sannotationf} -o {params.assemblystatrepo} -m 300  --glimmer > {output.logfile}
	"""
rule bwaindex_contig:
	input:
		logfile="results/velvet_assembly/{smp}_logfile_assemref_27.txt"
	params:
		contigfile="results/velvet_assembly/{smp}_AssemRef/contigs.fa"
	output:
		logfileindex="results/velvet_assembly/{smp}_logfile_cindex.txt"
	message: """ --- Creating contig fasta indexes """
	shell: """
		time bwa index -a bwtsw {params.contigfile} > {output.logfileindex}
	"""
rule alignreads2contig:
	input:
		logfile="results/velvet_assembly/{smp}_logfile_assemref_27.txt",
		logfileindex="results/velvet_assembly/{smp}_logfile_cindex.txt",
		read1p="results/primer_adapt_removed/{smp}_R1_paired.fastq",
		read2p="results/primer_adapt_removed/{smp}_R2_paired.fastq"
	params:
		contigfile="results/velvet_assembly/{smp}_AssemRef/contigs.fa"
	output:
		contigalign="results/assembly_aligned/{smp}_contigalign.sam"
	message: """ --- Aligning reads to assembly --- """
	shell: """
		time bwa mem -t 30 {params.contigfile} {input.read1p} {input.read2p} > {output.contigalign}
	"""
rule sortSAM:
	input:
		contigalignS="results/assembly_aligned/{smp}_contigalign.sam"
	output:
		contigalignB="results/assembly_aligned/{smp}_contigalign.bam"
	message: """ --- Creating references indexes """
	shell: """
		time samtools sort -O BAM {input.contigalignS} > {output.contigalignB}
	"""
rule reindexContig:
	input:
		logfile="results/velvet_assembly/{smp}_logfile_assemref_27.txt"
	params:
		contigfile="results/velvet_assembly/{smp}_AssemRef/contigs.fa"
	output:
		logfileContig="results/velvet_assembly/{smp}_reindex.log.txt"
	message: """ --- Indexing assembly contigs fasta files --- """
	shell: """
		time samtools faidx {params.contigfile} > {output.logfileContig}
	"""
rule variantsCall:
	input:
		logfile="results/velvet_assembly/{smp}_logfile_assemref_27.txt",
		logfileContig="results/velvet_assembly/{smp}_reindex.log.txt",
		contigalignB="results/assembly_aligned/{smp}_contigalign.bam"
	params:
		contigfile="results/velvet_assembly/{smp}_AssemRef/contigs.fa"
	output:
		logfile="results/variants_calling/{smp}_snpcall.txt",
		vcffile="results/variants_calling/{smp}_mpileup.vcf.gz"
	message: """ --- Calling variants """
	shell: """
		time samtools mpileup -u -g -f {params.contigfile} {input.contigalignB} | bcftools call -v -m -O z -o {output.vcffile} > {output.logfile}
	"""
rule vcfindex:
	input:
		vcffile="results/variants_calling/{smp}_mpileup.vcf.gz"
	output:
		logfileVCF="results/variants_calling/{smp}_vcfindex.txt"
	message: """ --- Creating index of vcf file --- """
	shell: """
		time  bcftools index {input.vcffile} > {output.logfileVCF}
	"""
rule buildConsensus:
	input:
		vcffile="results/variants_calling/{smp}_mpileup.vcf.gz",
		logfile="results/velvet_assembly/{smp}_logfile_assemref_27.txt",
		logfileVCF="results/variants_calling/{smp}_vcfindex.txt"
	params:
		contigfile="results/velvet_assembly/{smp}_AssemRef/contigs.fa"
	output:
		consensusfa="results/consensus_seq/{smp}_consensus.fa"
	message: """ --- Creating consensus sequences """
	shell: """
		time cat {params.contigfile} | bcftools consensus -H RA {input.vcffile} > {output.consensusfa}
	"""
rule variants_stat:
	input:
		vcffile="results/variants_calling/{smp}_mpileup.vcf.gz",
		logfile="results/velvet_assembly/{smp}_logfile_assemref_27.txt",
		logfileVCF="results/variants_calling/{smp}_vcfindex.txt"
	params:
		contigfile="results/velvet_assembly/{smp}_AssemRef/contigs.fa"
	output:
		variantsStat="results/variants_stats/{smp}_vcf.stats"
	message: """ --- Creating Variants statistics """
	shell: """
		time bcftools stats -F {params.contigfile} -s - {input.vcffile} > {output.variantsStat}
	"""